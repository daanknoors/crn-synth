window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "crnsynth", "modulename": "crnsynth", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.benchmark", "modulename": "crnsynth.benchmark", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.benchmark.benchmark", "modulename": "crnsynth.benchmark.benchmark", "kind": "module", "doc": "<p>Compare multiple synthetic data generation methods.</p>\n"}, {"fullname": "crnsynth.benchmark.benchmark.benchmark_generators", "modulename": "crnsynth.benchmark.benchmark", "qualname": "benchmark_generators", "kind": "function", "doc": "<p>Benchmark multiple synthetic data generators.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_real (pd.DataFrame):</strong>  Real data to synthesize.</li>\n<li><strong>data_holdout (pd.DataFrame):</strong>  Holdout data for reviewer.</li>\n<li><strong>generators (list):</strong>  List of generators to benchmark.</li>\n<li><strong>path_out (Path):</strong>  Output path to save synthetic data and generators.</li>\n<li><strong>reviewer (SyntheticDataReview):</strong>  Reviewer to evaluate synthetic data.</li>\n<li><strong>n_records (int):</strong>  Number of records to generate.</li>\n<li><strong>fname_param (str):</strong>  Parameter to include in filename if present in generator.</li>\n<li><strong>verbose (int):</strong>  Verbosity level.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DataFrame: Scores from reviewer.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_real</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">generators</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">path_out</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>,</span><span class=\"param\">\t<span class=\"n\">reviewer</span><span class=\"p\">:</span> <span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">benchmark</span><span class=\"o\">.</span><span class=\"n\">review</span><span class=\"o\">.</span><span class=\"n\">SyntheticDataReview</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_records</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fname_param</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.benchmark.ranking", "modulename": "crnsynth.benchmark.ranking", "kind": "module", "doc": "<p>Ranking of generators based on performance scores.</p>\n"}, {"fullname": "crnsynth.benchmark.ranking.generator_rankings", "modulename": "crnsynth.benchmark.ranking", "qualname": "generator_rankings", "kind": "function", "doc": "<p>Rank generators according to performance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>score_reports:</strong>  Results from score_reports.</li>\n<li><strong>statistic:</strong>  Defaults to using the mean performance scores.</li>\n<li><strong>weights:</strong>  Metric weights for each score report.</li>\n<li><strong>normalize:</strong>  TODO. Defaults to doing normalization.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Ranking scores per generator (lower is better).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">score_reports</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">weights</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">statistic</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;mean&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.benchmark.ranking.generator_rankings_by_group", "modulename": "crnsynth.benchmark.ranking", "qualname": "generator_rankings_by_group", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">score_reports</span>, </span><span class=\"param\"><span class=\"n\">grouper</span>, </span><span class=\"param\"><span class=\"n\">weights_by_group</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.benchmark.review", "modulename": "crnsynth.benchmark.review", "kind": "module", "doc": "<p>Run a suite of metrics on a synthetic dataset and review its performance.</p>\n"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview", "kind": "class", "doc": "<p>Run a suite of metrics on a synthetic dataset and review its performance.</p>\n"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.__init__", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>metrics List[BaseMetric], Dict[str, BaseMetric]:</strong>  List or Dict of metrics to run.</li>\n<li><strong>metric_kwargs (Dict[str, Any], optional):</strong>  Dictionary of keyword arguments for the metrics. Defaults to None.</li>\n<li><strong>encoder (Any, optional):</strong>  Use one type of encoding for all metrics. If None, use encoding method specified in\neach metric. Defaults to None.</li>\n<li><strong>n_jobs (int, optional):</strong>  Number of jobs to run in parallel. Defaults to 1.</li>\n<li><strong>verbose (int, optional):</strong>  Verbosity level. Defaults to 1.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseMetric</span><span class=\"p\">],</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseMetric</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">metric_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.metrics", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.metrics", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.metric_kwargs", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.metric_kwargs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.encoder", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.encoder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.n_jobs", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.verbose", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.scores_", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.scores_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.compute", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.compute", "kind": "function", "doc": "<p>Run all metrics on the synthetic data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_train (pd.DataFrame):</strong>  Training data.</li>\n<li><strong>data_synth (pd.DataFrame):</strong>  Synthetic data.</li>\n<li><strong>data_holdout (Union[pd.DataFrame, None], optional):</strong>  Holdout data for evaluation. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dict: Dictionary of metric results.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.benchmark.review.SyntheticDataReview.score_as_dataframe", "modulename": "crnsynth.benchmark.review", "qualname": "SyntheticDataReview.score_as_dataframe", "kind": "function", "doc": "<p>Convert scores to a DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.checks", "modulename": "crnsynth.checks", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.checks.logic", "modulename": "crnsynth.checks.logic", "kind": "module", "doc": "<p>Check whether information in data is consistent with domain knowledge.</p>\n"}, {"fullname": "crnsynth.checks.logic.check_bound", "modulename": "crnsynth.checks.logic", "qualname": "check_bound", "kind": "function", "doc": "<p>Check whether the values in the column with lowerbound never exceed the value\nof the column with the upperbound.</p>\n\n<p>For example: Progression Free Survival &lt; Overall Survival</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">column_lowerbound</span>, </span><span class=\"param\"><span class=\"n\">column_upperbound</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.checks.logic.check_no_invalid_bool_combination", "modulename": "crnsynth.checks.logic", "qualname": "check_no_invalid_bool_combination", "kind": "function", "doc": "<p>Check if there aren't any invalid bool combination</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">col1</span>, </span><span class=\"param\"><span class=\"n\">col2</span>, </span><span class=\"param\"><span class=\"n\">invalid_combo</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.checks.params", "modulename": "crnsynth.checks.params", "kind": "module", "doc": "<p>Check parameters in classes and functions</p>\n"}, {"fullname": "crnsynth.checks.params.set_class_param", "modulename": "crnsynth.checks.params", "qualname": "set_class_param", "kind": "function", "doc": "<p>Set parameter value in classes if it has the parameter.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">parameter_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameter_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">check_has_param</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.checks.params.check_param_consistency", "modulename": "crnsynth.checks.params", "qualname": "check_param_consistency", "kind": "function", "doc": "<p>Check parameter consistency across classes.</p>\n\n<p>For example: check_param_consistency(classes, \"random_state\", 42) will check if all classes have random_state = 42.\nIf force_value is True, only raise a warning and set the value to 42 if the class has a different value.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">classes</span>,</span><span class=\"param\">\t<span class=\"n\">parameter_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameter_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">force_value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.checks.privacy", "modulename": "crnsynth.checks.privacy", "kind": "module", "doc": "<p>Privacy checks for the synthetic data generation processing.</p>\n"}, {"fullname": "crnsynth.checks.privacy.check_rare_categories", "modulename": "crnsynth.checks.privacy", "qualname": "check_rare_categories", "kind": "function", "doc": "<p>Check whether there are any rare categories in the column of the dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">column</span>, </span><span class=\"param\"><span class=\"n\">min_support</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.checks.privacy.check_rare_combinations", "modulename": "crnsynth.checks.privacy", "qualname": "check_rare_combinations", "kind": "function", "doc": "<p>Check whether there are any rare combinations of categories between columns of the dataframe.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">num_columns</span>, </span><span class=\"param\"><span class=\"n\">min_support</span>, </span><span class=\"param\"><span class=\"n\">warn</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators", "modulename": "crnsynth.generators", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.DEFAULT_GENERATORS", "modulename": "crnsynth.generators", "qualname": "DEFAULT_GENERATORS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;dummy&#x27;: &lt;class &#x27;crnsynth.generators.dummy.DummyGenerator&#x27;&gt;, &#x27;marginal&#x27;: &lt;class &#x27;crnsynth.generators.marginal.MarginalGenerator&#x27;&gt;, &#x27;privbayes&#x27;: &lt;class &#x27;synthesis.synthesizers.privbayes.PrivBayes&#x27;&gt;, &#x27;uniform&#x27;: &lt;class &#x27;crnsynth.generators.uniform.UniformGenerator&#x27;&gt;}"}, {"fullname": "crnsynth.generators.base", "modulename": "crnsynth.generators.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.base.BaseGenerator", "modulename": "crnsynth.generators.base", "qualname": "BaseGenerator", "kind": "class", "doc": "<p>Base class for synthetic data generators</p>\n"}, {"fullname": "crnsynth.generators.base.BaseGenerator.name", "modulename": "crnsynth.generators.base", "qualname": "BaseGenerator.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "crnsynth.generators.base.BaseGenerator.fit", "modulename": "crnsynth.generators.base", "qualname": "BaseGenerator.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_real</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.base.BaseGenerator.generate", "modulename": "crnsynth.generators.base", "qualname": "BaseGenerator.generate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.base.BaseGenerator.set_params", "modulename": "crnsynth.generators.base", "qualname": "BaseGenerator.set_params", "kind": "function", "doc": "<p>Set parameters</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.base.BaseGenerator.get_params", "modulename": "crnsynth.generators.base", "qualname": "BaseGenerator.get_params", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.base.BaseGenerator.save", "modulename": "crnsynth.generators.base", "qualname": "BaseGenerator.save", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.base.BaseGenerator.load", "modulename": "crnsynth.generators.base", "qualname": "BaseGenerator.load", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.dummy", "modulename": "crnsynth.generators.dummy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.dummy.DummyGenerator", "modulename": "crnsynth.generators.dummy", "qualname": "DummyGenerator", "kind": "class", "doc": "<p>Samples records from the original dataset. Useful as a baseline for privacy metrics.</p>\n\n<p>When setting sample_with_replace to False and n_records equal to the original dataset,\nthe generator will just create a copy of the fitted data.</p>\n\n<p>CAUTION: do not release the output of this generator when based on sensitive data!</p>\n", "bases": "crnsynth.generators.base.BaseGenerator"}, {"fullname": "crnsynth.generators.dummy.DummyGenerator.__init__", "modulename": "crnsynth.generators.dummy", "qualname": "DummyGenerator.__init__", "kind": "function", "doc": "<p>Initialize the generator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sample_with_replace (bool):</strong>  if true record from data_real can be sampled more than once. Default is False.</li>\n<li><strong>random_state (int):</strong>  random state for reproducibility. Default is None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sample_with_replace</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "crnsynth.generators.dummy.DummyGenerator.sample_with_replace", "modulename": "crnsynth.generators.dummy", "qualname": "DummyGenerator.sample_with_replace", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.dummy.DummyGenerator.random_state", "modulename": "crnsynth.generators.dummy", "qualname": "DummyGenerator.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.dummy.DummyGenerator.model", "modulename": "crnsynth.generators.dummy", "qualname": "DummyGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.dummy.DummyGenerator.fit", "modulename": "crnsynth.generators.dummy", "qualname": "DummyGenerator.fit", "kind": "function", "doc": "<p>Fit the model to the real data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_real</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.dummy.DummyGenerator.generate", "modulename": "crnsynth.generators.dummy", "qualname": "DummyGenerator.generate", "kind": "function", "doc": "<p>Copy the real data</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.marginal", "modulename": "crnsynth.generators.marginal", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.marginal.MarginalGenerator", "modulename": "crnsynth.generators.marginal", "qualname": "MarginalGenerator", "kind": "class", "doc": "<p>Marginal Generator based on the MarginalSynthesizer from synthesis</p>\n\n<p>Generate records based on marginal distribution of columns independently.</p>\n", "bases": "crnsynth.generators.base.BaseGenerator"}, {"fullname": "crnsynth.generators.marginal.MarginalGenerator.__init__", "modulename": "crnsynth.generators.marginal", "qualname": "MarginalGenerator.__init__", "kind": "function", "doc": "<p>Initialize the generator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>epsilon:</strong>  privacy budget for differential privacy.</li>\n<li><strong>verbose:</strong>  Verbosity level.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.generators.marginal.MarginalGenerator.model", "modulename": "crnsynth.generators.marginal", "qualname": "MarginalGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.marginal.MarginalGenerator.epsilon", "modulename": "crnsynth.generators.marginal", "qualname": "MarginalGenerator.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.marginal.MarginalGenerator.fit", "modulename": "crnsynth.generators.marginal", "qualname": "MarginalGenerator.fit", "kind": "function", "doc": "<p>Fit the model to the real data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_real</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.marginal.MarginalGenerator.generate", "modulename": "crnsynth.generators.marginal", "qualname": "MarginalGenerator.generate", "kind": "function", "doc": "<p>Generate records based on the marginal distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.privbayes", "modulename": "crnsynth.generators.privbayes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.privbayes.PrivBayes", "modulename": "crnsynth.generators.privbayes", "qualname": "PrivBayes", "kind": "class", "doc": "<p>PrivBayes implementation from synthesis.</p>\n\n<p>PrivBayes implementation of synthetic-data-generation library (DK). Other implementations can be found in synthcity\nor DataSynthesizer. However, these only concern the base version of the original PrivBayes paper.</p>\n\n<p>This version also implemented the following improvements mentioned in the extended paper:</p>\n\n<ul>\n<li>R score function instead of Mutual Information - which has a lower sensitivity and thus requires less noise to compute.</li>\n<li>Candidate attribute-parent pairs (AP-pairs) are determined based on the theta-usefulness criterion instead of setting a fixed max degree K.</li>\n</ul>\n", "bases": "crnsynth.generators.base.BaseGenerator"}, {"fullname": "crnsynth.generators.privbayes.PrivBayes.__init__", "modulename": "crnsynth.generators.privbayes", "qualname": "PrivBayes.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.generators.privbayes.PrivBayes.epsilon", "modulename": "crnsynth.generators.privbayes", "qualname": "PrivBayes.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.privbayes.PrivBayes.model", "modulename": "crnsynth.generators.privbayes", "qualname": "PrivBayes.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.privbayes.PrivBayes.fit", "modulename": "crnsynth.generators.privbayes", "qualname": "PrivBayes.fit", "kind": "function", "doc": "<p>Fit the model to the real data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_real</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.privbayes.PrivBayes.generate", "modulename": "crnsynth.generators.privbayes", "qualname": "PrivBayes.generate", "kind": "function", "doc": "<p>Generate records based on the trained model.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.privbayes.PrivBayes.save", "modulename": "crnsynth.generators.privbayes", "qualname": "PrivBayes.save", "kind": "function", "doc": "<p>Save the model to a file.</p>\n\n<p>PrivBayes has its own saving method, so we use that to avoid errors.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.privbayes.PrivBayes.load", "modulename": "crnsynth.generators.privbayes", "qualname": "PrivBayes.load", "kind": "function", "doc": "<p>Load the model from a file.</p>\n\n<p>PrivBayes has its own loading method, so we use that to avoid errors.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.uniform", "modulename": "crnsynth.generators.uniform", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.uniform.UniformGenerator", "modulename": "crnsynth.generators.uniform", "qualname": "UniformGenerator", "kind": "class", "doc": "<p>Generate synthetic data by sampling columns using the uniform distribution.</p>\n", "bases": "crnsynth.generators.base.BaseGenerator"}, {"fullname": "crnsynth.generators.uniform.UniformGenerator.__init__", "modulename": "crnsynth.generators.uniform", "qualname": "UniformGenerator.__init__", "kind": "function", "doc": "<p>Initialize the generator.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>epsilon (float):</strong>  privacy budget for differential privacy.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">epsilon</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "crnsynth.generators.uniform.UniformGenerator.epsilon", "modulename": "crnsynth.generators.uniform", "qualname": "UniformGenerator.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.uniform.UniformGenerator.model", "modulename": "crnsynth.generators.uniform", "qualname": "UniformGenerator.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.generators.uniform.UniformGenerator.fit", "modulename": "crnsynth.generators.uniform", "qualname": "UniformGenerator.fit", "kind": "function", "doc": "<p>Fit the model to the real data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_real</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.generators.uniform.UniformGenerator.generate", "modulename": "crnsynth.generators.uniform", "qualname": "UniformGenerator.generate", "kind": "function", "doc": "<p>Generate records based on the uniform distribution.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n_records</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics", "modulename": "crnsynth.metrics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.PRIVACY_METRICS", "modulename": "crnsynth.metrics", "qualname": "PRIVACY_METRICS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[DistanceClosestRecord({&#x27;encoder&#x27;: &#x27;ordinal&#x27;, &#x27;quantile&#x27;: 0.5, &#x27;metric&#x27;: &#x27;gower&#x27;, &#x27;categorical_columns&#x27;: None}), NearestNeighborDistanceRatio({&#x27;encoder&#x27;: &#x27;ordinal&#x27;, &#x27;quantile&#x27;: 0.5, &#x27;metric&#x27;: &#x27;gower&#x27;, &#x27;n_neighbors&#x27;: 2, &#x27;categorical_columns&#x27;: None}), CategoricalCAPScore({&#x27;encoder&#x27;: &#x27;ordinal&#x27;, &#x27;categorical_columns&#x27;: None, &#x27;frac_sensitive&#x27;: 0.5, &#x27;random_state&#x27;: None})]"}, {"fullname": "crnsynth.metrics.UTILITY_METRICS", "modulename": "crnsynth.metrics", "qualname": "UTILITY_METRICS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[ContingencySimilarityScore({&#x27;encoder&#x27;: None, &#x27;categorical_columns&#x27;: None}), FeatureCorrelation({&#x27;encoder&#x27;: None, &#x27;numerical_columns&#x27;: None}), CorrelationSimilarityScore({&#x27;encoder&#x27;: None, &#x27;numerical_columns&#x27;: None})]"}, {"fullname": "crnsynth.metrics.ALL_METRICS", "modulename": "crnsynth.metrics", "qualname": "ALL_METRICS", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;privacy&#x27;: [DistanceClosestRecord({&#x27;encoder&#x27;: &#x27;ordinal&#x27;, &#x27;quantile&#x27;: 0.5, &#x27;metric&#x27;: &#x27;gower&#x27;, &#x27;categorical_columns&#x27;: None}), NearestNeighborDistanceRatio({&#x27;encoder&#x27;: &#x27;ordinal&#x27;, &#x27;quantile&#x27;: 0.5, &#x27;metric&#x27;: &#x27;gower&#x27;, &#x27;n_neighbors&#x27;: 2, &#x27;categorical_columns&#x27;: None}), CategoricalCAPScore({&#x27;encoder&#x27;: &#x27;ordinal&#x27;, &#x27;categorical_columns&#x27;: None, &#x27;frac_sensitive&#x27;: 0.5, &#x27;random_state&#x27;: None})], &#x27;utility&#x27;: [ContingencySimilarityScore({&#x27;encoder&#x27;: None, &#x27;categorical_columns&#x27;: None}), FeatureCorrelation({&#x27;encoder&#x27;: None, &#x27;numerical_columns&#x27;: None}), CorrelationSimilarityScore({&#x27;encoder&#x27;: None, &#x27;numerical_columns&#x27;: None})]}"}, {"fullname": "crnsynth.metrics.base", "modulename": "crnsynth.metrics.base", "kind": "module", "doc": "<p>Base metric class for CRN synthesis metrics.</p>\n"}, {"fullname": "crnsynth.metrics.base.BaseMetric", "modulename": "crnsynth.metrics.base", "qualname": "BaseMetric", "kind": "class", "doc": "<p>Base metric class for CRN synthesis metrics.</p>\n"}, {"fullname": "crnsynth.metrics.base.BaseMetric.__init__", "modulename": "crnsynth.metrics.base", "qualname": "BaseMetric.__init__", "kind": "function", "doc": "<p>Initialize the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "crnsynth.metrics.base.BaseMetric.encoder", "modulename": "crnsynth.metrics.base", "qualname": "BaseMetric.encoder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.base.BaseMetric.name", "modulename": "crnsynth.metrics.base", "qualname": "BaseMetric.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "crnsynth.metrics.base.BaseMetric.type", "modulename": "crnsynth.metrics.base", "qualname": "BaseMetric.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.base.BaseMetric.direction", "modulename": "crnsynth.metrics.base", "qualname": "BaseMetric.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.base.BaseMetric.compute", "modulename": "crnsynth.metrics.base", "qualname": "BaseMetric.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.base.BaseMetric.encode", "modulename": "crnsynth.metrics.base", "qualname": "BaseMetric.encode", "kind": "function", "doc": "<p>Encode datasets. Fit encoder on train. Transform train, synth and holdout (optional).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">return_dataframe</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance", "modulename": "crnsynth.metrics.performance", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.classification", "modulename": "crnsynth.metrics.performance.classification", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison", "kind": "class", "doc": "<p>Train a classifier on real and synthetic data and compare performance on holdout data.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.__init__", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_column:</strong>  Target column name.</li>\n<li><strong>model:</strong>  Model to use for training.</li>\n<li><strong>score_fn:</strong>  Score function to use for evaluation.</li>\n<li><strong>encoder:</strong>  Encoder to use for encoding the data.</li>\n<li><strong>random_state:</strong>  Random seed.</li>\n<li><strong>verbose:</strong>  Verbosity level.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">target_column</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">score_fn</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.target_column", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.target_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.model", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.model", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.score_fn", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.score_fn", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.random_state", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.verbose", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.direction", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.type", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.classification.ClassifierComparison.compute", "modulename": "crnsynth.metrics.performance.classification", "qualname": "ClassifierComparison.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_train</span>, </span><span class=\"param\"><span class=\"n\">data_synth</span>, </span><span class=\"param\"><span class=\"n\">data_holdout</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.coxbeta", "modulename": "crnsynth.metrics.performance.coxbeta", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.coxbeta.cox_beta_score", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "cox_beta_score", "kind": "function", "doc": "<p>Compute hybrid data quality score based on Cox coefficients\nsimilarity.</p>\n\n<p>Assumes you are working with an augmented dataset, where a part of the original real dataset is replaced with\nsynthetic records. For example, creating a synthetic control arm for a clinical trial.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_hybrid:</strong>  Pre-processed hybrid data (real + synthetic).</li>\n<li><strong>data_real:</strong>  Pre-processed real data (full real data).</li>\n<li><strong>feature_columns:</strong>  Covariate names.</li>\n<li><strong>target_column:</strong>  Test column name (eg treatment).</li>\n<li><strong>duration_column:</strong>  Time to event column for Cox model.</li>\n<li><strong>event_column:</strong>  Optional event indicator column for Cox model.</li>\n<li><strong>clip_value:</strong>  Clip value for propensity weights.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Score value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_hybrid</span>,</span><span class=\"param\">\t<span class=\"n\">data_real</span>,</span><span class=\"param\">\t<span class=\"n\">feature_columns</span>,</span><span class=\"param\">\t<span class=\"n\">target_column</span>,</span><span class=\"param\">\t<span class=\"n\">duration_column</span>,</span><span class=\"param\">\t<span class=\"n\">event_column</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">clip_value</span><span class=\"o\">=</span><span class=\"mi\">4</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore", "kind": "class", "doc": "<p>Cox beta score evaluator class.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore.__init__", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>clip_value:</strong>  Clip value for propensity weights.</li>\n<li><strong>target_column:</strong>  Target column name.</li>\n<li><strong>duration_column:</strong>  Duration column name.</li>\n<li><strong>event_column:</strong>  Event column name.</li>\n<li><strong>encoder:</strong>  Encoder to use for encoding the data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">clip_value</span>,</span><span class=\"param\">\t<span class=\"n\">target_column</span>,</span><span class=\"param\">\t<span class=\"n\">duration_column</span>,</span><span class=\"param\">\t<span class=\"n\">event_column</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore.clip_value", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore.clip_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore.target_column", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore.target_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore.duration_column", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore.duration_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore.event_column", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore.event_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore.direction", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore.type", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.coxbeta.CoxBetaScore.compute", "modulename": "crnsynth.metrics.performance.coxbeta", "qualname": "CoxBetaScore.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_train</span>, </span><span class=\"param\"><span class=\"n\">data_synth</span>, </span><span class=\"param\"><span class=\"n\">data_holdout</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival", "modulename": "crnsynth.metrics.performance.survival", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.survival.median_survival_score", "modulename": "crnsynth.metrics.performance.survival", "qualname": "median_survival_score", "kind": "function", "doc": "<p>Deviation between the median survival times in the original and\nsynthetic data. Survival curves are estimated with the Kaplan-Meier method.</p>\n\n<p>Optimal score value is zero.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_hybrid</span>, </span><span class=\"param\"><span class=\"n\">data_real</span>, </span><span class=\"param\"><span class=\"n\">duration_column</span>, </span><span class=\"param\"><span class=\"n\">event_column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.MedianSurvivalScore", "modulename": "crnsynth.metrics.performance.survival", "qualname": "MedianSurvivalScore", "kind": "class", "doc": "<p>Median survival score.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.performance.survival.MedianSurvivalScore.__init__", "modulename": "crnsynth.metrics.performance.survival", "qualname": "MedianSurvivalScore.__init__", "kind": "function", "doc": "<p>Initialize the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">duration_column</span>, </span><span class=\"param\"><span class=\"n\">event_column</span>, </span><span class=\"param\"><span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.performance.survival.MedianSurvivalScore.duration_column", "modulename": "crnsynth.metrics.performance.survival", "qualname": "MedianSurvivalScore.duration_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.survival.MedianSurvivalScore.event_column", "modulename": "crnsynth.metrics.performance.survival", "qualname": "MedianSurvivalScore.event_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.survival.MedianSurvivalScore.direction", "modulename": "crnsynth.metrics.performance.survival", "qualname": "MedianSurvivalScore.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.MedianSurvivalScore.type", "modulename": "crnsynth.metrics.performance.survival", "qualname": "MedianSurvivalScore.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.MedianSurvivalScore.compute", "modulename": "crnsynth.metrics.performance.survival", "qualname": "MedianSurvivalScore.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.predicted_median_survival_score", "modulename": "crnsynth.metrics.performance.survival", "qualname": "predicted_median_survival_score", "kind": "function", "doc": "<p>Predicted median survival score.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_train</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span>,</span><span class=\"param\">\t<span class=\"n\">feature_columns</span>,</span><span class=\"param\">\t<span class=\"n\">duration_column</span>,</span><span class=\"param\">\t<span class=\"n\">event_column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.PredictedMedianSurvivalScore", "modulename": "crnsynth.metrics.performance.survival", "qualname": "PredictedMedianSurvivalScore", "kind": "class", "doc": "<p>Predicted median survival score.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.performance.survival.PredictedMedianSurvivalScore.__init__", "modulename": "crnsynth.metrics.performance.survival", "qualname": "PredictedMedianSurvivalScore.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>feature_columns:</strong>  List of feature columns to use for prediction.</li>\n<li><strong>duration_column:</strong>  Column name for the duration of the event.</li>\n<li><strong>event_column:</strong>  Column name for the event indicator.</li>\n<li><strong>encoder:</strong>  Encoder to use for encoding the data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">feature_columns</span>,</span><span class=\"param\">\t<span class=\"n\">duration_column</span>,</span><span class=\"param\">\t<span class=\"n\">event_column</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.performance.survival.PredictedMedianSurvivalScore.feature_columns", "modulename": "crnsynth.metrics.performance.survival", "qualname": "PredictedMedianSurvivalScore.feature_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.survival.PredictedMedianSurvivalScore.duration_column", "modulename": "crnsynth.metrics.performance.survival", "qualname": "PredictedMedianSurvivalScore.duration_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.survival.PredictedMedianSurvivalScore.event_column", "modulename": "crnsynth.metrics.performance.survival", "qualname": "PredictedMedianSurvivalScore.event_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.survival.PredictedMedianSurvivalScore.direction", "modulename": "crnsynth.metrics.performance.survival", "qualname": "PredictedMedianSurvivalScore.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.PredictedMedianSurvivalScore.type", "modulename": "crnsynth.metrics.performance.survival", "qualname": "PredictedMedianSurvivalScore.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.PredictedMedianSurvivalScore.compute", "modulename": "crnsynth.metrics.performance.survival", "qualname": "PredictedMedianSurvivalScore.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.survival_curves_deviation", "modulename": "crnsynth.metrics.performance.survival", "qualname": "survival_curves_deviation", "kind": "function", "doc": "<p>Compute the deviation between survival curves of the original and\nsynthetic data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_hybrid</span>, </span><span class=\"param\"><span class=\"n\">data_real</span>, </span><span class=\"param\"><span class=\"n\">duration_column</span>, </span><span class=\"param\"><span class=\"n\">event_column</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.SurvivalCurvesDistanceScore", "modulename": "crnsynth.metrics.performance.survival", "qualname": "SurvivalCurvesDistanceScore", "kind": "class", "doc": "<p>Survival curves distance score.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.performance.survival.SurvivalCurvesDistanceScore.__init__", "modulename": "crnsynth.metrics.performance.survival", "qualname": "SurvivalCurvesDistanceScore.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>duration_column:</strong>  Column name for the duration of the event.</li>\n<li><strong>event_column:</strong>  Column name for the event indicator.</li>\n<li><strong>encoder:</strong>  Encoder to use for encoding the data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">duration_column</span>, </span><span class=\"param\"><span class=\"n\">event_column</span>, </span><span class=\"param\"><span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.performance.survival.SurvivalCurvesDistanceScore.duration_column", "modulename": "crnsynth.metrics.performance.survival", "qualname": "SurvivalCurvesDistanceScore.duration_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.survival.SurvivalCurvesDistanceScore.event_column", "modulename": "crnsynth.metrics.performance.survival", "qualname": "SurvivalCurvesDistanceScore.event_column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.performance.survival.SurvivalCurvesDistanceScore.direction", "modulename": "crnsynth.metrics.performance.survival", "qualname": "SurvivalCurvesDistanceScore.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.SurvivalCurvesDistanceScore.type", "modulename": "crnsynth.metrics.performance.survival", "qualname": "SurvivalCurvesDistanceScore.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.survival.SurvivalCurvesDistanceScore.compute", "modulename": "crnsynth.metrics.performance.survival", "qualname": "SurvivalCurvesDistanceScore.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.utils", "modulename": "crnsynth.metrics.performance.utils", "kind": "module", "doc": "<p>Utility functions for computing propensity weights and fitting survival models.</p>\n"}, {"fullname": "crnsynth.metrics.performance.utils.propensity_weights", "modulename": "crnsynth.metrics.performance.utils", "qualname": "propensity_weights", "kind": "function", "doc": "<p>Compute propensity weights using logistic regression.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">clip_value</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.utils.fit_kaplanmeier", "modulename": "crnsynth.metrics.performance.utils", "qualname": "fit_kaplanmeier", "kind": "function", "doc": "<p>Kaplan-Meier estimate of median survival time.</p>\n\n<p>Args:'\n    event_times: Time to event data.\n    event_indicator: Outcome indicator.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Median survival time estimate.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">event_times</span>, </span><span class=\"param\"><span class=\"n\">event_indicator</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.utils.fit_cox", "modulename": "crnsynth.metrics.performance.utils", "qualname": "fit_cox", "kind": "function", "doc": "<p>Fit Cox proportional hazards model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">duration_column</span>,</span><span class=\"param\">\t<span class=\"n\">cox_columns</span>,</span><span class=\"param\">\t<span class=\"n\">weights_column</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">event_column</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.performance.utils.fit_flexible_parametric_model", "modulename": "crnsynth.metrics.performance.utils", "qualname": "fit_flexible_parametric_model", "kind": "function", "doc": "<p>Fit a flexible parametric model.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">duration_column</span>,</span><span class=\"param\">\t<span class=\"n\">fit_columns</span>,</span><span class=\"param\">\t<span class=\"n\">weights_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">event_column</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy", "modulename": "crnsynth.metrics.privacy", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.catcap", "modulename": "crnsynth.metrics.privacy.catcap", "kind": "module", "doc": "<p>This metric describes how difficult it is for an attacker to correctly guess the sensitive information using an algorithm called Correct Attribution Probability (CAP)</p>\n"}, {"fullname": "crnsynth.metrics.privacy.catcap.CategoricalCAPScore", "modulename": "crnsynth.metrics.privacy.catcap", "qualname": "CategoricalCAPScore", "kind": "class", "doc": "<p>Categorical Correct Attribution Probability (CAP) score metric. This metric describes how difficult it is for an\nattacker to correctly guess the sensitive information based on a synthetic dataset and a fraction of the variables\nin the original dataset.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.privacy.catcap.CategoricalCAPScore.__init__", "modulename": "crnsynth.metrics.privacy.catcap", "qualname": "CategoricalCAPScore.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>categorical_columns:</strong>  List of columns to consider for the metric.</li>\n<li><strong>frac_sensitive:</strong>  Fraction of sensitive columns to consider.</li>\n<li><strong>encoder:</strong>  Encoder to use for encoding the data.</li>\n<li><strong>random_state:</strong>  Random seed.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">categorical_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">frac_sensitive</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"s1\">&#39;ordinal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.privacy.catcap.CategoricalCAPScore.categorical_columns", "modulename": "crnsynth.metrics.privacy.catcap", "qualname": "CategoricalCAPScore.categorical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.catcap.CategoricalCAPScore.frac_sensitive", "modulename": "crnsynth.metrics.privacy.catcap", "qualname": "CategoricalCAPScore.frac_sensitive", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.catcap.CategoricalCAPScore.random_state", "modulename": "crnsynth.metrics.privacy.catcap", "qualname": "CategoricalCAPScore.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.catcap.CategoricalCAPScore.type", "modulename": "crnsynth.metrics.privacy.catcap", "qualname": "CategoricalCAPScore.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.catcap.CategoricalCAPScore.direction", "modulename": "crnsynth.metrics.privacy.catcap", "qualname": "CategoricalCAPScore.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.catcap.CategoricalCAPScore.compute", "modulename": "crnsynth.metrics.privacy.catcap", "qualname": "CategoricalCAPScore.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.catknn", "modulename": "crnsynth.metrics.privacy.catknn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.catknn.CategoricalKNNScore", "modulename": "crnsynth.metrics.privacy.catknn", "qualname": "CategoricalKNNScore", "kind": "class", "doc": "<p>Categorical K-Nearest Neighbors (KNN) score metric by SDMetrics.</p>\n\n<p>It is used to train a model to predict sensitive attributes from key attributes\nusing the synthetic data. Then, evaluate the privacy of the model by\ntrying to predict the sensitive attributes of the real data.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.privacy.catknn.CategoricalKNNScore.__init__", "modulename": "crnsynth.metrics.privacy.catknn", "qualname": "CategoricalKNNScore.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>categorical_columns:</strong>  List of columns to consider for the metric.</li>\n<li><strong>frac_sensitive:</strong>  Fraction of sensitive columns to consider.</li>\n<li><strong>random_state:</strong>  Random seed.</li>\n<li><strong>encoder:</strong>  Encoder to use for encoding the data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">categorical_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">frac_sensitive</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.privacy.catknn.CategoricalKNNScore.categorical_columns", "modulename": "crnsynth.metrics.privacy.catknn", "qualname": "CategoricalKNNScore.categorical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.catknn.CategoricalKNNScore.frac_sensitive", "modulename": "crnsynth.metrics.privacy.catknn", "qualname": "CategoricalKNNScore.frac_sensitive", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.catknn.CategoricalKNNScore.random_state", "modulename": "crnsynth.metrics.privacy.catknn", "qualname": "CategoricalKNNScore.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.catknn.CategoricalKNNScore.type", "modulename": "crnsynth.metrics.privacy.catknn", "qualname": "CategoricalKNNScore.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.catknn.CategoricalKNNScore.direction", "modulename": "crnsynth.metrics.privacy.catknn", "qualname": "CategoricalKNNScore.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.catknn.CategoricalKNNScore.compute", "modulename": "crnsynth.metrics.privacy.catknn", "qualname": "CategoricalKNNScore.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.dcr", "modulename": "crnsynth.metrics.privacy.dcr", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.dcr.compute_closest_distances", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "compute_closest_distances", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_train</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span>,</span><span class=\"param\">\t<span class=\"n\">categorical_columns</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;gower&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.dcr.DistanceClosestRecord", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "DistanceClosestRecord", "kind": "class", "doc": "<p>Measures the distance from synthetic records to the closest real record.\nThe lower the distance, the more similar the synthetic data is to the real data.</p>\n\n<p>Privacy risk: DCR close to 0, where synthetic data points are close to real data points.\nCompare to holdout dataset to determine an acceptable level. DCR of synthetic data should be equal or higher than\nthe DCR of the holdout dataset to the training data.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.privacy.dcr.DistanceClosestRecord.__init__", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "DistanceClosestRecord.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>quantile (float):</strong>  Quantile of distances to the closest real record to take.</li>\n<li><strong>metric (str):</strong>  Distance metric to use.</li>\n<li><strong>categorical_columns (List or None):</strong>  List of categorical columns.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"s1\">&#39;ordinal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">quantile</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gower&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">categorical_columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.privacy.dcr.DistanceClosestRecord.quantile", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "DistanceClosestRecord.quantile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.dcr.DistanceClosestRecord.metric", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "DistanceClosestRecord.metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.dcr.DistanceClosestRecord.categorical_columns", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "DistanceClosestRecord.categorical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.dcr.DistanceClosestRecord.type", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "DistanceClosestRecord.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.dcr.DistanceClosestRecord.direction", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "DistanceClosestRecord.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.dcr.DistanceClosestRecord.compute", "modulename": "crnsynth.metrics.privacy.dcr", "qualname": "DistanceClosestRecord.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.nndr", "modulename": "crnsynth.metrics.privacy.nndr", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.nndr.compute_ratio_distances", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "compute_ratio_distances", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_train</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span>,</span><span class=\"param\">\t<span class=\"n\">categorical_columns</span>,</span><span class=\"param\">\t<span class=\"n\">n_neighbors</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;gower&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio", "kind": "class", "doc": "<p>Ratio of the distance between synthetic data's record to the closest and second closest real record.\nAllows comparing outliers and inliers in the population.</p>\n\n<p>Privacy risk: NNDR close to 0, where synthetic data points are close to real data points in sparse areas of the data space (outliers).\nCompare to holdout to determine an acceptable level. NNDR of synthetic data should be equal or higher than the NNDR of the\nholdout test set to the training data.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio.__init__", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>quantile (float):</strong>  Quantile to take distances to closest real record to take.</li>\n<li><strong>distance_metric (str):</strong>  Distance metric to use for computing nearest neighbors.</li>\n<li><strong>n_neighbors (int):</strong>  Number of nearest neighbors to use for computing NNDR.</li>\n<li><strong>categorical_columns (List or None):</strong>  List of categorical columns.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"s1\">&#39;ordinal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">quantile</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;gower&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_neighbors</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">categorical_columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio.quantile", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio.quantile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio.metric", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio.metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio.n_neighbors", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio.n_neighbors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio.categorical_columns", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio.categorical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio.type", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio.direction", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.nndr.NearestNeighborDistanceRatio.compute", "modulename": "crnsynth.metrics.privacy.nndr", "qualname": "NearestNeighborDistanceRatio.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">data_train</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.privacy.utils", "modulename": "crnsynth.metrics.privacy.utils", "kind": "module", "doc": "<p>Utility for custom privacy metrics.</p>\n"}, {"fullname": "crnsynth.metrics.privacy.utils.SMOOTHING_FACTOR", "modulename": "crnsynth.metrics.privacy.utils", "qualname": "SMOOTHING_FACTOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "1e-08"}, {"fullname": "crnsynth.metrics.privacy.utils.compute_distance_nn", "modulename": "crnsynth.metrics.privacy.utils", "qualname": "compute_distance_nn", "kind": "function", "doc": "<p>Compute distance to the closest real record for each synthetic record.\nNormalize using holdout data.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_train</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span>,</span><span class=\"param\">\t<span class=\"n\">data_holdout</span>,</span><span class=\"param\">\t<span class=\"n\">categorical_columns</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span>,</span><span class=\"param\">\t<span class=\"n\">n_neighbors</span>,</span><span class=\"param\">\t<span class=\"n\">distance_metric</span><span class=\"o\">=</span><span class=\"s1\">&#39;gower&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility", "modulename": "crnsynth.metrics.utility", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.utility.contingency", "modulename": "crnsynth.metrics.utility.contingency", "kind": "module", "doc": "<p>Contingency similarity metric</p>\n"}, {"fullname": "crnsynth.metrics.utility.contingency.ContingencySimilarityScore", "modulename": "crnsynth.metrics.utility.contingency", "qualname": "ContingencySimilarityScore", "kind": "class", "doc": "<p>Contingency Similarity by SDMetrics (SDV)</p>\n\n<p>This metric computes the similarity of a pair of categorical columns between the real and synthetic\ndatasets -- aka it compares 2D distributions.</p>\n\n<p>Computes the difference between contingency tables using total variation distance and\nconverts it to a similarity score.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.utility.contingency.ContingencySimilarityScore.__init__", "modulename": "crnsynth.metrics.utility.contingency", "qualname": "ContingencySimilarityScore.__init__", "kind": "function", "doc": "<p>Initialize the metric.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoder:</strong>  Encoder to use for encoding the data.</li>\n<li><strong>categorical_columns:</strong>  List of columns to consider for the metric.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">categorical_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "crnsynth.metrics.utility.contingency.ContingencySimilarityScore.categorical_columns", "modulename": "crnsynth.metrics.utility.contingency", "qualname": "ContingencySimilarityScore.categorical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.utility.contingency.ContingencySimilarityScore.type", "modulename": "crnsynth.metrics.utility.contingency", "qualname": "ContingencySimilarityScore.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.contingency.ContingencySimilarityScore.direction", "modulename": "crnsynth.metrics.utility.contingency", "qualname": "ContingencySimilarityScore.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.contingency.ContingencySimilarityScore.compute", "modulename": "crnsynth.metrics.utility.contingency", "qualname": "ContingencySimilarityScore.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_train</span>, </span><span class=\"param\"><span class=\"n\">data_synth</span>, </span><span class=\"param\"><span class=\"n\">data_holdout</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.correlation", "modulename": "crnsynth.metrics.utility.correlation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.utility.correlation.mean_features_correlation", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "mean_features_correlation", "kind": "function", "doc": "<p>Mean pair-wise feature correlations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_real</span>, </span><span class=\"param\"><span class=\"n\">data_synth</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.correlation.FeatureCorrelation", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "FeatureCorrelation", "kind": "class", "doc": "<p>Compute mean pair-wise feature correlations between real and synthetic data.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.utility.correlation.FeatureCorrelation.__init__", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "FeatureCorrelation.__init__", "kind": "function", "doc": "<p>Initialize the metric.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>encoder:</strong>  Encoder to use for encoding the data.</li>\n<li><strong>numerical_columns:</strong>  List of numerical columns to consider for the metric.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">numerical_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "crnsynth.metrics.utility.correlation.FeatureCorrelation.numerical_columns", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "FeatureCorrelation.numerical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.utility.correlation.FeatureCorrelation.type", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "FeatureCorrelation.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.correlation.FeatureCorrelation.direction", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "FeatureCorrelation.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.correlation.FeatureCorrelation.compute", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "FeatureCorrelation.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_train</span>, </span><span class=\"param\"><span class=\"n\">data_synth</span>, </span><span class=\"param\"><span class=\"n\">data_holdout</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.correlation.CorrelationSimilarityScore", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "CorrelationSimilarityScore", "kind": "class", "doc": "<p>Correlation Similarity by SDMetrics (SDV)</p>\n\n<p>This metric measures the correlation between a pair of numerical columns and computes the similarity between the\nreal and synthetic data -- aka it compares the trends of 2D distributions.</p>\n", "bases": "crnsynth.metrics.base.BaseMetric"}, {"fullname": "crnsynth.metrics.utility.correlation.CorrelationSimilarityScore.__init__", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "CorrelationSimilarityScore.__init__", "kind": "function", "doc": "<p>Initialize the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">numerical_columns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "crnsynth.metrics.utility.correlation.CorrelationSimilarityScore.numerical_columns", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "CorrelationSimilarityScore.numerical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.metrics.utility.correlation.CorrelationSimilarityScore.type", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "CorrelationSimilarityScore.type", "kind": "function", "doc": "<p>Return the type of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.correlation.CorrelationSimilarityScore.direction", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "CorrelationSimilarityScore.direction", "kind": "function", "doc": "<p>Return the direction of the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.metrics.utility.correlation.CorrelationSimilarityScore.compute", "modulename": "crnsynth.metrics.utility.correlation", "qualname": "CorrelationSimilarityScore.compute", "kind": "function", "doc": "<p>Compute the metric.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_train</span>, </span><span class=\"param\"><span class=\"n\">data_synth</span>, </span><span class=\"param\"><span class=\"n\">data_holdout</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing", "modulename": "crnsynth.processing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.encoding", "modulename": "crnsynth.processing.encoding", "kind": "module", "doc": "<p>Encoding data for synthesis or metrics</p>\n"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder", "kind": "class", "doc": "<p>Default encoder for preparing data for synthesis or metrics</p>\n", "bases": "sklearn.compose._column_transformer.ColumnTransformer"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder.__init__", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder.__init__", "kind": "function", "doc": "<p>Initialize the encoder</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">categorical_columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">numerical_columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Iterable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder.categorical_columns", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder.categorical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder.numerical_columns", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder.numerical_columns", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder.encoder", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder.encoder", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder.fit", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder.fit", "kind": "function", "doc": "<p>Fit all transformers using X.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : {array-like, dataframe} of shape (n_samples, n_features)\n    Input data, of which specified subsets are used to fit the\n    transformers.</p>\n\n<p>y : array-like of shape (n_samples,...), default=None\n    Targets for supervised learning.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>self : ColumnTransformer\n    This estimator.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder.transform", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder.transform", "kind": "function", "doc": "<p>Transform X separately by each transformer, concatenate results.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : {array-like, dataframe} of shape (n_samples, n_features)\n    The data to be transformed by subset.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>X_t : {array-like, sparse matrix} of                 shape (n_samples, sum_n_components)\n    Horizontally stacked results of transformers. sum_n_components is the\n    sum of n_components (output dimension) over transformers. If\n    any result is a sparse matrix, everything will be converted to\n    sparse matrices.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder.set_fit_request", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.encoding.DefaultEncoder.set_transform_request", "modulename": "crnsynth.processing.encoding", "qualname": "DefaultEncoder.set_transform_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.encoding.get_encoder", "modulename": "crnsynth.processing.encoding", "qualname": "get_encoder", "kind": "function", "doc": "<p>Get an encoder by name</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">encoder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.encoding.convert_encoded_data_to_dataframe", "modulename": "crnsynth.processing.encoding", "qualname": "convert_encoded_data_to_dataframe", "kind": "function", "doc": "<p>Convert encoded data back to a dataframe</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data_enc</span>, </span><span class=\"param\"><span class=\"n\">encoder</span>, </span><span class=\"param\"><span class=\"n\">column_names</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.encoding.encode_data", "modulename": "crnsynth.processing.encoding", "qualname": "encode_data", "kind": "function", "doc": "<p>Encode data using a ColumnTransformer</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">encoder</span>, </span><span class=\"param\"><span class=\"n\">refit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">return_dataframe</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization", "modulename": "crnsynth.processing.generalization", "kind": "module", "doc": "<p>Generalization Mechanism</p>\n"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech", "kind": "class", "doc": "<p>Base class for generalization mechanisms.</p>\n", "bases": "sklearn.base.TransformerMixin, sklearn.base.BaseEstimator"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.__init__", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span>, </span><span class=\"param\"><span class=\"n\">bins</span>, </span><span class=\"param\"><span class=\"n\">bounds</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">inverse</span>, </span><span class=\"param\"><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.column", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.bins", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.bins", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.bounds", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.bounds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.epsilon", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.epsilon", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.inverse", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.inverse", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.random_state", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.fit", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.fit", "kind": "function", "doc": "<p>Fit the generalization mechanism to the data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.transform", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.transform", "kind": "function", "doc": "<p>Transform the data using the generalization mechanism.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.inverse_transform", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.inverse_transform", "kind": "function", "doc": "<p>Inverse transform the data using the generalization mechanism.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.set_fit_request", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.set_transform_request", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.set_transform_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.BaseGeneralizationMech.set_inverse_transform_request", "modulename": "crnsynth.processing.generalization", "qualname": "BaseGeneralizationMech.set_inverse_transform_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.NumericGeneralizationMech", "modulename": "crnsynth.processing.generalization", "qualname": "NumericGeneralizationMech", "kind": "class", "doc": "<p>Generalization mechanism for numeric data</p>\n", "bases": "BaseGeneralizationMech"}, {"fullname": "crnsynth.processing.generalization.NumericGeneralizationMech.__init__", "modulename": "crnsynth.processing.generalization", "qualname": "NumericGeneralizationMech.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">column</span>,</span><span class=\"param\">\t<span class=\"n\">bins</span>,</span><span class=\"param\">\t<span class=\"n\">bounds</span>,</span><span class=\"param\">\t<span class=\"n\">epsilon</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">inverse</span><span class=\"o\">=</span><span class=\"s1\">&#39;truncated_normal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "crnsynth.processing.generalization.NumericGeneralizationMech.fit", "modulename": "crnsynth.processing.generalization", "qualname": "NumericGeneralizationMech.fit", "kind": "function", "doc": "<p>Fit the generalization mechanism to the data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.NumericGeneralizationMech.transform", "modulename": "crnsynth.processing.generalization", "qualname": "NumericGeneralizationMech.transform", "kind": "function", "doc": "<p>Transform the data using the generalization mechanism.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.NumericGeneralizationMech.inverse_transform", "modulename": "crnsynth.processing.generalization", "qualname": "NumericGeneralizationMech.inverse_transform", "kind": "function", "doc": "<p>Inverse transform the data using the generalization mechanism.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.NumericGeneralizationMech.set_fit_request", "modulename": "crnsynth.processing.generalization", "qualname": "NumericGeneralizationMech.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.NumericGeneralizationMech.set_transform_request", "modulename": "crnsynth.processing.generalization", "qualname": "NumericGeneralizationMech.set_transform_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.generalization.NumericGeneralizationMech.set_inverse_transform_request", "modulename": "crnsynth.processing.generalization", "qualname": "NumericGeneralizationMech.set_inverse_transform_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.postprocessing", "modulename": "crnsynth.processing.postprocessing", "kind": "module", "doc": "<p>Post-processing functions for synthetic data after synthesis</p>\n"}, {"fullname": "crnsynth.processing.postprocessing.reverse_generalization", "modulename": "crnsynth.processing.postprocessing", "qualname": "reverse_generalization", "kind": "function", "doc": "<p>Reverse generalization of synthetic data using a list of generalization mechanisms.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_synth</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">generalizers</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">processing</span><span class=\"o\">.</span><span class=\"n\">generalization</span><span class=\"o\">.</span><span class=\"n\">BaseGeneralizationMech</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.postprocessing.numeric_to_date", "modulename": "crnsynth.processing.postprocessing", "qualname": "numeric_to_date", "kind": "function", "doc": "<p>Convert numeric date to date string</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num</span>, </span><span class=\"param\"><span class=\"n\">date_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.postprocessing.ensure_column_bound", "modulename": "crnsynth.processing.postprocessing", "qualname": "ensure_column_bound", "kind": "function", "doc": "<p>Ensures that values in column_name never exceeds column_bound_name.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">column_name</span>,</span><span class=\"param\">\t<span class=\"n\">column_bound_name</span>,</span><span class=\"param\">\t<span class=\"n\">missing_value</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.postprocessing.skew_lowerbound_to_upperbound", "modulename": "crnsynth.processing.postprocessing", "qualname": "skew_lowerbound_to_upperbound", "kind": "function", "doc": "<p>Skews numeric values in the lowerbound are close to the upperbound to become equal.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">df</span>,</span><span class=\"param\">\t<span class=\"n\">column_lowerbound</span>,</span><span class=\"param\">\t<span class=\"n\">column_upperbound</span>,</span><span class=\"param\">\t<span class=\"n\">min_ratio</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.preprocessing", "modulename": "crnsynth.processing.preprocessing", "kind": "module", "doc": "<p>Pre-processing functions for real data before synthesis</p>\n"}, {"fullname": "crnsynth.processing.preprocessing.split_train_holdout", "modulename": "crnsynth.processing.preprocessing", "qualname": "split_train_holdout", "kind": "function", "doc": "<p>Split data into training and holdout sets. Optionally stratify based on target column.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_real</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">target_column</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">holdout_size</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.preprocessing.generalize_data", "modulename": "crnsynth.processing.preprocessing", "qualname": "generalize_data", "kind": "function", "doc": "<p>Generalize data using a list of generalization mechanisms.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_real</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">generalizers</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">processing</span><span class=\"o\">.</span><span class=\"n\">generalization</span><span class=\"o\">.</span><span class=\"n\">BaseGeneralizationMech</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.preprocessing.date_to_numeric", "modulename": "crnsynth.processing.preprocessing", "qualname": "date_to_numeric", "kind": "function", "doc": "<p>Convert date string to numeric date</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dates</span>, </span><span class=\"param\"><span class=\"n\">date_format</span><span class=\"o\">=</span><span class=\"s1\">&#39;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.utils", "modulename": "crnsynth.processing.utils", "kind": "module", "doc": "<p>Utility functions for processing data.</p>\n"}, {"fullname": "crnsynth.processing.utils.flatten_dict", "modulename": "crnsynth.processing.utils", "qualname": "flatten_dict", "kind": "function", "doc": "<p>Flatten a nested dictionary.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">d</span>, </span><span class=\"param\"><span class=\"n\">parent_key</span><span class=\"o\">=</span><span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;_&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.utils.reduce_dict", "modulename": "crnsynth.processing.utils", "qualname": "reduce_dict", "kind": "function", "doc": "<p>Reduce dictionary to only include specified keys.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dictionary</span>, </span><span class=\"param\"><span class=\"n\">keys_to_keep</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.processing.utils.sample_subset", "modulename": "crnsynth.processing.utils", "qualname": "sample_subset", "kind": "function", "doc": "<p>Sample a subset from a collection of items.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">items</span>, </span><span class=\"param\"><span class=\"n\">size</span>, </span><span class=\"param\"><span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">return_residual</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization", "modulename": "crnsynth.serialization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.serialization.load", "modulename": "crnsynth.serialization.load", "kind": "module", "doc": "<p>Functions for loading data from disk</p>\n"}, {"fullname": "crnsynth.serialization.load.load_csv", "modulename": "crnsynth.serialization.load", "qualname": "load_csv", "kind": "function", "doc": "<p>Load csv file from disk</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.load.load_csv_generator", "modulename": "crnsynth.serialization.load", "qualname": "load_csv_generator", "kind": "function", "doc": "<p>Load csv files from disk as a generator</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path_to_dir</span>, </span><span class=\"param\"><span class=\"n\">filenames</span>, </span><span class=\"param\"><span class=\"n\">yield_filename</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">index_col</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.load.load_json", "modulename": "crnsynth.serialization.load", "qualname": "load_json", "kind": "function", "doc": "<p>Load json file from disk</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.load.load_generator", "modulename": "crnsynth.serialization.load", "qualname": "load_generator", "kind": "function", "doc": "<p>Load a generator from disk</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.paths", "modulename": "crnsynth.serialization.paths", "kind": "module", "doc": "<p>Paths for package</p>\n"}, {"fullname": "crnsynth.serialization.paths.PATH_REPO", "modulename": "crnsynth.serialization.paths", "qualname": "PATH_REPO", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/Users/dknoors/Projects/synthesis-dk/crn-synth&#x27;)"}, {"fullname": "crnsynth.serialization.paths.PATH_CODE", "modulename": "crnsynth.serialization.paths", "qualname": "PATH_CODE", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/Users/dknoors/Projects/synthesis-dk/crn-synth/crnsynth&#x27;)"}, {"fullname": "crnsynth.serialization.paths.PATH_RESULTS", "modulename": "crnsynth.serialization.paths", "qualname": "PATH_RESULTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "PosixPath(&#x27;/Users/dknoors/Projects/synthesis-dk/crn-synth/results&#x27;)"}, {"fullname": "crnsynth.serialization.paths.DEFAULT_DIRS", "modulename": "crnsynth.serialization.paths", "qualname": "DEFAULT_DIRS", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;synthetic_data&#x27;, &#x27;generators&#x27;, &#x27;reports&#x27;, &#x27;configs&#x27;]"}, {"fullname": "crnsynth.serialization.paths.PATH_DATA", "modulename": "crnsynth.serialization.paths", "qualname": "PATH_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;adult&#x27;: PosixPath(&#x27;/Users/dknoors/Projects/synthesis-dk/crn-synth/data/adult.csv&#x27;)}"}, {"fullname": "crnsynth.serialization.paths.create_output_dir", "modulename": "crnsynth.serialization.paths", "qualname": "create_output_dir", "kind": "function", "doc": "<p>Create output directories for results.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path_out</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">dirs</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.save", "modulename": "crnsynth.serialization.save", "kind": "module", "doc": "<p>Functions for saving data to disk</p>\n"}, {"fullname": "crnsynth.serialization.save.save_generator", "modulename": "crnsynth.serialization.save", "qualname": "save_generator", "kind": "function", "doc": "<p>Save a generator to disk</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">generator</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.save.save_csv", "modulename": "crnsynth.serialization.save", "qualname": "save_csv", "kind": "function", "doc": "<p>Save data to disk</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.save.save_json", "modulename": "crnsynth.serialization.save", "qualname": "save_json", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path_to_file</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.save.make_json_serializable", "modulename": "crnsynth.serialization.save", "qualname": "make_json_serializable", "kind": "function", "doc": "<p>Convert values to be JSON serializable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.save.object_to_dict", "modulename": "crnsynth.serialization.save", "qualname": "object_to_dict", "kind": "function", "doc": "<p>Convert all parameters and values of a class to a dictionary that is JSON serializable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">exclude_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.serialization.utils", "modulename": "crnsynth.serialization.utils", "kind": "module", "doc": "<p>Utility functions for serialization.</p>\n"}, {"fullname": "crnsynth.serialization.utils.remove_dir", "modulename": "crnsynth.serialization.utils", "qualname": "remove_dir", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path_to_dir</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.statistics", "modulename": "crnsynth.statistics", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.statistics.dp_stats", "modulename": "crnsynth.statistics.dp_stats", "kind": "module", "doc": "<p>Compute differentially private statistics from data.</p>\n"}, {"fullname": "crnsynth.statistics.dp_stats.dp_mean", "modulename": "crnsynth.statistics.dp_stats", "qualname": "dp_mean", "kind": "function", "doc": "<p>Wrapper of mean function from diffprivlib. Computes the DP mean of an array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">bounds</span>, </span><span class=\"param\"><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.statistics.dp_stats.dp_quantile", "modulename": "crnsynth.statistics.dp_stats", "qualname": "dp_quantile", "kind": "function", "doc": "<p>Wrapper of quantile function from diffprivlib. Computes the DP quantile of an array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">bounds</span>, </span><span class=\"param\"><span class=\"n\">quant</span>, </span><span class=\"param\"><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.statistics.dp_stats.dp_median", "modulename": "crnsynth.statistics.dp_stats", "qualname": "dp_median", "kind": "function", "doc": "<p>Wrapper of median function from diffprivlib. Computes the DP median of an array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">bounds</span>, </span><span class=\"param\"><span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.statistics.dp_stats.dp_var", "modulename": "crnsynth.statistics.dp_stats", "qualname": "dp_var", "kind": "function", "doc": "<p>Wrapper of var function from diffprivlib. Computes the DP variance of an array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">bounds</span>, </span><span class=\"param\"><span class=\"n\">random_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.statistics.dp_stats.dp_std", "modulename": "crnsynth.statistics.dp_stats", "qualname": "dp_std", "kind": "function", "doc": "<p>Wrapper of std function from diffprivlib. Computes the DP std of an array.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">array</span>, </span><span class=\"param\"><span class=\"n\">epsilon</span>, </span><span class=\"param\"><span class=\"n\">bounds</span>, </span><span class=\"param\"><span class=\"n\">random_state</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.statistics.inferiority", "modulename": "crnsynth.statistics.inferiority", "kind": "module", "doc": "<p>Module for hypothesis testing of non-inferiority between two groups.</p>\n"}, {"fullname": "crnsynth.statistics.inferiority.ttest_non_inferiority", "modulename": "crnsynth.statistics.inferiority", "qualname": "ttest_non_inferiority", "kind": "function", "doc": "<p>Perform a one-sided t-test with a non-inferiority threshold for two independent samples.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>TODO</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TODO</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">mean1</span>,</span><span class=\"param\">\t<span class=\"n\">stddev1</span>,</span><span class=\"param\">\t<span class=\"n\">nobs1</span>,</span><span class=\"param\">\t<span class=\"n\">mean2</span>,</span><span class=\"param\">\t<span class=\"n\">stddev2</span>,</span><span class=\"param\">\t<span class=\"n\">nobs2</span>,</span><span class=\"param\">\t<span class=\"n\">relative_margin</span>,</span><span class=\"param\">\t<span class=\"n\">equal_variance</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">lower_is_better</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.statistics.inferiority.cox_non_inferiority_test", "modulename": "crnsynth.statistics.inferiority", "qualname": "cox_non_inferiority_test", "kind": "function", "doc": "<p>Hypothesis testing of whether one group is inferior to another group.</p>\n\n<p>Based on notes from \"Two-Sample Non-Inferiority Tests for Survival Data using Cox Regression\"\nby NCSS.</p>\n\n<h6 id=\"the-test-hypotheses-are\">The test hypotheses are:</h6>\n\n<blockquote>\n  <p>H0: Insufficient evidence that group A is superior to group B\n  H1: Can reject H0</p>\n</blockquote>\n\n<p>By rejecting H0, non-inferiority can be thus concluded at the given\nsignificance level between two groups.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  Input data with group indicator variable, time to even and possibly\nadditional covariates.</li>\n<li><strong>margin:</strong>  Threshold to determine the test outcome. Should be &gt; 1 if\nlower is better. Otherwise &lt; 1.</li>\n<li><strong>duration_col:</strong>  Name of the column that contains the time to event.</li>\n<li><strong>group_col:</strong>  Name of the column indicating the groups.</li>\n<li><strong>event_col (optional):</strong>  Name of the column that contains the death\nobservations. If left as None, assume all individuals are uncensored.</li>\n<li><strong>lower_is_better:</strong>  Determine the angle of the test for the two groups.\nE.g.: If the endpoint represents death or relapse, higher hazards are\nsaid to be worse and lower is better. Alternatively, if duration is the time\nto cure or remission, then higher hazards are better.</li>\n<li><strong>alpha:</strong>  Test significance level.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Test results.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">margin</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">duration_col</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">group_col</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">event_col</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">lower_is_better</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">alpha</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">cox_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>,</span><span class=\"param\">\t<span class=\"n\">cox_fit_kwargs</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Dict</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.synthesization", "modulename": "crnsynth.synthesization", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.synthesization.pipeline", "modulename": "crnsynth.synthesization.pipeline", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.synthesization.pipeline.run_synth_pipeline", "modulename": "crnsynth.synthesization.pipeline", "qualname": "run_synth_pipeline", "kind": "function", "doc": "<p>Generic synthesis pipeline from raw to synth data.</p>\n\n<p>Flexibility to specify custom preprocessing, generalization, and postprocessing functions.\nCan be used as an example for how to run a synthesis pipeline. Customize to own needs.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_real</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">generator</span><span class=\"p\">:</span> <span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">generators</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseGenerator</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess_func</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">postprocess_func</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">built</span><span class=\"o\">-</span><span class=\"ow\">in</span> <span class=\"n\">function</span> <span class=\"nb\">callable</span><span class=\"o\">&gt;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">generalizers</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">processing</span><span class=\"o\">.</span><span class=\"n\">generalization</span><span class=\"o\">.</span><span class=\"n\">BaseGeneralizationMech</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">holdout_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">target_column</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_records</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">&#39;train&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;holdout&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;synth&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;generator&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.synthesization.synthesization", "modulename": "crnsynth.synthesization.synthesization", "kind": "module", "doc": "<p>Functions to run synthesis pipeline on real data.</p>\n"}, {"fullname": "crnsynth.synthesization.synthesization.generate_synth_data", "modulename": "crnsynth.synthesization.synthesization", "qualname": "generate_synth_data", "kind": "function", "doc": "<p>Generate synthetic data using a generator.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_real</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">generator</span><span class=\"p\">:</span> <span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">generators</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseGenerator</span>,</span><span class=\"param\">\t<span class=\"n\">n_records</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">,</span> <span class=\"n\">crnsynth</span><span class=\"o\">.</span><span class=\"n\">generators</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">BaseGenerator</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.visuals", "modulename": "crnsynth.visuals", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.visuals.cardinality", "modulename": "crnsynth.visuals.cardinality", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.visuals.cardinality.plot_compare_cardinality", "modulename": "crnsynth.visuals.cardinality", "qualname": "plot_compare_cardinality", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data_real</span>,</span><span class=\"param\">\t<span class=\"n\">data_synth</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.4</span>,</span><span class=\"param\">\t<span class=\"n\">bar_shift</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.visuals.correlations", "modulename": "crnsynth.visuals.correlations", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.visuals.correlations.plot_correlations_difference", "modulename": "crnsynth.visuals.correlations", "qualname": "plot_correlations_difference", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data1</span>, </span><span class=\"param\"><span class=\"n\">data2</span>, </span><span class=\"param\"><span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.visuals.correlations.plot_correlations", "modulename": "crnsynth.visuals.correlations", "qualname": "plot_correlations", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">vmax</span><span class=\"o\">=</span><span class=\"mf\">0.5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.visuals.histograms", "modulename": "crnsynth.visuals.histograms", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.visuals.histograms.plot_histograms", "modulename": "crnsynth.visuals.histograms", "qualname": "plot_histograms", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">columns</span>, </span><span class=\"param\"><span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">card_thresh</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.visuals.histograms.plot_cumulative_histograms", "modulename": "crnsynth.visuals.histograms", "qualname": "plot_cumulative_histograms", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">columns</span>, </span><span class=\"param\"><span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">data_ref</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">dropna</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "crnsynth.visuals.missing", "modulename": "crnsynth.visuals.missing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "crnsynth.visuals.missing.plot_missing", "modulename": "crnsynth.visuals.missing", "qualname": "plot_missing", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">reference</span>,</span><span class=\"param\">\t<span class=\"n\">comparison</span>,</span><span class=\"param\">\t<span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.4</span>,</span><span class=\"param\">\t<span class=\"n\">bar_shift</span><span class=\"o\">=</span><span class=\"mf\">0.2</span>,</span><span class=\"param\">\t<span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();